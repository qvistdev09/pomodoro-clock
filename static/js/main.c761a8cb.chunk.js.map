{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","activeSession","pomodoring","intervalFunc","state","goingToBreak","breakLength","sessionLength","currentMinutes","currentSeconds","changeLength","bind","pomodoroStart","pomodoroStop","pomodoroReset","this","clearInterval","setState","setInterval","value","property","className","style","gridArea","onClick","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c761a8cb.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.activeSession = false;\n    this.pomodoring = false;\n    this.intervalFunc = null;\n    this.state = {\n      goingToBreak: true,\n      breakLength: 2,\n      sessionLength: 1,\n      currentMinutes: 0,\n      currentSeconds: 0,\n    };\n    this.changeLength = this.changeLength.bind(this);\n    this.pomodoroStart = this.pomodoroStart.bind(this);\n    this.pomodoroStop = this.pomodoroStop.bind(this);\n    this.pomodoroReset = this.pomodoroReset.bind(this);\n  }\n\n  pomodoroReset() {\n    this.activeSession = false;\n    this.pomodoring = false;\n    clearInterval(this.intervalFunc);\n    this.setState({\n      goingToBreak: true,\n      breakLength: 5,\n      sessionLength: 25,\n      currentMinutes: 0,\n      currentSeconds: 0,\n    });\n  }\n\n  pomodoroStop() {\n    this.pomodoring = false;\n    clearInterval(this.intervalFunc);\n  }\n\n  pomodoroStart() {\n    if (this.pomodoring) {\n      return;\n    }\n\n    this.pomodoring = true;\n\n    if (this.activeSession === false) {\n      this.setState((state) => ({\n        currentMinutes: state.sessionLength,\n        currentSeconds: 0,\n      }));\n\n      this.activeSession = true;\n    }\n\n    // eslint-disable-next-line\n    this.intervalFunc = setInterval(() => {\n      this.setState((state) => ({\n        currentSeconds: state.currentSeconds - 1,\n      }));\n      if (this.state.currentMinutes === 0 && this.state.currentSeconds < 0) {\n        if (this.state.goingToBreak) {\n          this.setState((state) => ({\n            currentMinutes: state.breakLength - 1,\n            currentSeconds: 59,\n            goingToBreak: false,\n          }));\n        } else {\n          this.setState((state) => ({\n            currentMinutes: state.sessionLength - 1,\n            currentSeconds: 59,\n            goingToBreak: true,\n          }));\n        }\n      } else if (this.state.currentSeconds < 0) {\n        this.setState((state) => ({\n          currentSeconds: 59,\n          currentMinutes: state.currentMinutes - 1,\n        }));\n      }\n    }, 50);\n  }\n\n  changeLength(value, property) {\n    if (this.pomodoring) {\n      return;\n    }\n    this.activeSession = false;\n    if (this.state[property] === 1 && value === -1) {\n      return;\n    }\n    if (this.state[property] === 30 && value === 1) {\n      return;\n    }\n    this.setState((state) => ({\n      [property]: state[property] + value,\n      goingToBreak: true,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"grid-item m-small d-col\" style={{ gridArea: 'title' }}>\n          <h1>POMODORO CLOCK</h1>\n          <hr />\n        </div>\n        <div className=\"grid-item-grid m-small\" style={{ gridArea: 'break' }}>\n          <div className=\"grid-item align-end\">\n            <p>Break length</p>\n          </div>\n          <div className=\"grid-item\">\n            <i\n              className=\"fas fa-chevron-circle-left clickable\"\n              onClick={() => this.changeLength(-1, 'breakLength')}\n            ></i>\n            <p className=\"length-nr\">{this.state.breakLength}</p>\n            <i\n              className=\"fas fa-chevron-circle-right clickable\"\n              onClick={() => this.changeLength(1, 'breakLength')}\n            ></i>\n          </div>\n        </div>\n        <div className=\"grid-item-grid m-small\" style={{ gridArea: 'session' }}>\n          <div className=\"grid-item align-end\">\n            <p>Session length</p>\n          </div>\n          <div className=\"grid-item\">\n            <i\n              className=\"fas fa-chevron-circle-left clickable\"\n              onClick={() => this.changeLength(-1, 'sessionLength')}\n            ></i>\n            <p className=\"length-nr\">{this.state.sessionLength}</p>\n            <i\n              className=\"fas fa-chevron-circle-right clickable\"\n              onClick={() => this.changeLength(1, 'sessionLength')}\n            ></i>\n          </div>\n        </div>\n        <div className=\"grid-item-grid m-small\" style={{ gridArea: 'timer' }}>\n          <div className=\"grid-item align-end\">Session</div>\n          <div className=\"grid-item\">\n            <p className=\"timer\">\n              {this.pomodoring\n                ? this.state.currentMinutes + ':'\n                : this.state.sessionLength + ':'}\n              {!this.pomodoring\n                ? '00'\n                : this.state.currentSeconds < 10\n                ? '0' + this.state.currentSeconds\n                : this.state.currentSeconds}\n            </p>\n          </div>\n        </div>\n        <div className=\"grid-item m-small\" style={{ gridArea: 'controls' }}>\n          <i className=\"fas fa-play clickable\" onClick={this.pomodoroStart}></i>\n          <i className=\"fas fa-pause clickable\" onClick={this.pomodoroStop}></i>\n          <i className=\"fas fa-redo-alt clickable\" onClick={this.pomodoroReset}></i>\n        </div>\n        <div className=\"grid-item m-small d-col\" style={{ gridArea: 'cred' }}>\n          <p className=\"cred\">\n            by{' '}\n            <a\n              href=\"https://github.com/qvistsson\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Qvistsson\n            </a>\n          </p>\n          <p className=\"cred\">\n            {this.state.goingToBreak ? 'Work time!' : 'Break!'}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <i className=\"fas fa-seedling decoleaf\"></i>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}